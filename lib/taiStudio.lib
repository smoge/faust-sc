declare name "taiStudio";
declare author "LFSaw";
declare copyright "MIT";

import("stdfaust.lib");
sc = library("scUGens.lib");



//---------------------------------`(lf.)strictRising`---------------------------------------
// 1 for strictly rising, 0 otherwise
//
// #### Usage
//
// ```
// process = _ : lf.strictRising : _
// ```
//-----------------------------------------------------------------------------
strictRising(x) = x > x';

//---------------------------------`(lf.)strictFalling`---------------------------------------
// 1 for strictly falling, 0 otherwise
//
// #### Usage
//
// ```
// process = _ : lf.strictFalling : _
// ```
//-----------------------------------------------------------------------------
strictFalling(x) =  x < x';

//---------------------------------`(lf.)changed`---------------------------------------
// 1 if signal changes, 0 otherwise
//
// #### Usage
//
// ```
// process = _ : lf.changed : _;
// ```
//-----------------------------------------------------------------------------
changed(x) = x != x';

//---------------------------------`(lf.)falling`---------------------------------------
// 1 for falling or unchanged, 0 otherwise
//
// #### Usage
//
// ```
// process = _ : lf.falling : _;
// ```
//-----------------------------------------------------------------------------
falling(x) = x <= x';

//---------------------------------`(lf.)rising`---------------------------------------
// 1 for rising or unchanged, 0 otherwise
//
// #### Usage
//
// ```
// process = _ : lf.rising : _;
// ```
//-----------------------------------------------------------------------------
rising(x) = x >= x';

//---------------------------------`(lf.)unchanged`---------------------------------------
// 1 for unchanged, 0 otherwise 
//
// #### Usage
//
// ```
// process = _ : lf.unchanged : _;
// ```
//-----------------------------------------------------------------------------
unchanged(x) = x == x';



///////////////////////////// bit operations


//---------------------------------`(lf.)bitNot`---------------------------------------
//
// (author: Till Bovermann) 
//
// bitwise Not
//
// note: relies on foreign functions (c-based platforms only)
//
//
// #### Usage
//
// ```
// 16: bitNot
// ```
//-----------------------------------------------------------------------------
bitNot = ffunction(int bit_not (int), "scUGens.h", "");

//---------------------------------`(lf.)left_shift`---------------------------------------
//
// (author: Till Bovermann) 
//
// unsigned left shift operator
//
// note: relies on foreign functions (c-based platforms only)
//
//
// #### Usage
//
// ```
// _ : left_shift(_)
// ```
//-----------------------------------------------------------------------------
left_shift = ffunction(int bit_leftShift (int, int), "scUGens.h", "");


//---------------------------------`(lf.)right_shift`---------------------------------------
//
// (author: Till Bovermann) 
//
// unsigned right shift operator
//
// note: relies on foreign functions (c-based platforms only)
//
//
// #### Usage
//
// ```
// _ : right_shift(_)
// ```
//-----------------------------------------------------------------------------
right_shift = ffunction(int bit_rightShift (int, int), "scUGens.h", "");


///////////// Synthesis

//---------------------------------`(lf.)phasor`---------------------------------------
// resettable phasor
// 
// #### Usage
//
// ```
// process = lf.phasor(freq, phase, reset, length) : _;
// ```
//-----------------------------------------------------------------------------
phasor(freq, phase, reset, length) = int(os.hs_phasor(length, freq, sc.trig1_1(reset)) + (phase * length)) % length;


//---------------------------------`(lf.)sineosc_s`---------------------------------------
// hardsynced sine wave with phase offset
// 
// #### Usage
//
// ```
// process = lf.sineosc_s(freq, phase, sync) : _;
// ```
//-----------------------------------------------------------------------------
sineosc_s(freq, phase, sync) =  phasor(freq, phase, sync, waveLength) : rdtable(waveLength, wave)
with {
    waveLength = pl.tablesize;
    wave = os.sinwaveform(waveLength);
};

//---------------------------------`(lf.)funcosc`---------------------------------------
// table-based function oscillator
// 
// #### Usage
//
// ```
// process = lf.funcosc(func, freq, phase, reset);
// ```
// with
// `freq` — oscillation frequency
// `reset` — trigger resetting to beginning of table
// `function` — function with one variable element; evaluated and stored in a wavetable in the range of [0..1]
//-----------------------------------------------------------------------------
funcosc(func, freq, phase, reset) =  phasor(freq, phase, reset, size) : rdtable(func2waveform(func, size)) with {
    size = pl.tablesize;
};


//---------------------------------`(lf.)funcosc`---------------------------------------
// returns tuple of size and values as expected from rdtable
// #### Usage
//
// ```
// process = lf.func2waveform(function, size) : _,_;
// ```
// with
// `function` — function with one variable element; evaluated in the rangfe of [0..1]
// `size` — sample accuracy
//-----------------------------------------------------------------------------
func2waveform(function, size) = float(ba.time)/float(size) : function : size, _;




//---------------------------------`(lf.)tanh_approx`---------------------------------------
// via https://www.musicdsp.org/en/latest/Other/238-rational-tanh-approximation.html?highlight=tanh
// This is a rational function to approximate a tanh-like soft clipper.It is based on the
// pade-approximation of the tanh function with tweaked coefficients.
// 
// The function is in the range x=-3..3 and outputs the range y=-1..1.Beyond this range the
// output must be clamped to-1..1.
// 
// The first to derivatives of the function vanish at-3 and 3,so the transition to the hard
// clipped region is C2-continuous.
//-----------------------------------------------------------------------------
tanh_approx(v) = clamp(v) * ( 27. + (clamp(v)* clamp(v)) / ( 27. + 9. * (clamp(v)* clamp(v)) ) with {
    clamp(v) = min(max(v, -3), 3);
};



//------------------------------`(lf.)map`------------------
map(bias, scale, in) = max(0, (bias * biasfac) + (scale * in * modfac)) with {
    biasfac = 15000;
    modfac = 15000;
};



//------------------------------`(lf.)ms`------------------
// MS processor
// ms(x, y, width) = (x + y) * 0.5, (x-y) * 0.5 * width;
ms(1, midIn, sideIn) = (midIn + sideIn) * 0.5, (midIn-sideIn) * 0.5;
ms(width, midIn, sideIn) = (mid + side) * 0.5, (mid-side) * 0.5 with {
    mid = midIn;
    side = sideIn * width;
};


//------------------------------`(lf.)rotate2`------------------
rotate2(r, x, y) = xout, yout with {
    xout = cos(r) * x + sin(r) * y;
    yout = cos(r) * y - sin(r) * x;
};
