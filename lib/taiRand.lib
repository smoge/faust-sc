declare name "taiRand";
declare author "LFSaw";
declare copyright "MIT";

import("stdfaust.lib");
lf = library("taiStudio.lib");
sc = library("scUGens.lib");

IMAX = 2147483647;
UMAX = -1;
B31 = 1073741824; // 0x40000000 == 2bin01000000000000000000000000000000
not(v) = ffunction(int bit_not (int), "scUGens.h", "");  xor(v, UMAX);
l_shift (v, n) = v << n;
r_shift(v, n) = ffunction(int bit_rightShift (int, int), "scUGens.h", "");


//---------------------------------`(rnd.)ihash`---------------------------------------
// hashing an integer value. Output is in the range [-2147483648, 2147483647].
//
// #### Usage
//
// ```
// process = int(_): rnd.ihash : _;
// ```
//-----------------------------------------------------------------------------
ihash = ffunction(int bitHash (int), "scUGens.h", "");


//---------------------------------`(rnd.)fhash`---------------------------------------
// hashing a value. output is a float between [0..1]
//
// #### Usage
//
// ```
// process = _: rnd.fhash : _;
// ```
//-----------------------------------------------------------------------------
fhash = ffunction(float hasher (float), "scUGens.h", "");



//---------------------------------`(rnd.)taus_rand`---------------------------------------
// generates random integer values in the range [0, 2147483647] at sample rate
// based on JMC's implementation of the 
// Ran088: L'Ecuyer's 1996 three-component Tausworthe generator "taus88"
// 
// 
// #### Usage
// 
// ```
// process = rnd.taus_rand(s1, s2, s3) : _;
// ```
// with
//   + `s1 >  2` — (int) 1st seed
//   + `s2 >  8` — (int) 2nd seed
//   + `s3 > 16` — (int) 3rd seed
//
// on change of (at least one) state, taus_rand is re-seeded to that state configuration.  
taus_rand(s1, s2, s3) = rgen(s1, s2, s3) ~ si.bus(3) : (_ xor _ xor _) with {


    // if input state does not change, feed back internal state 
    inSelector(s1, s2, s3, i1, i2, i3) = 
        select2(changed(s1, s2, s3), i1, s1),
        select2(changed(s1, s2, s3), i2, s2),
        select2(changed(s1, s2, s3), i3, s3) 
    with {
        changed(a, b, c) = lf.changed(a) | lf.changed(b) | lf.changed(c);
    };

    // generate integer random element in the range [0, 2147483647], 
    // i.e. [2r0, 2r01111111111111111111111111111111] (all bits high but sign bit) 
    rgen(s1, s2, s3) = inSelector(s1, s2, s3) : 
        rgen_1( -2, 12, 13, 19), 
        rgen_1( -8,  4,  2, 25), 
        rgen_1(-16, 17,  3, 11);

    // last `&` ensures values between [2r0, 2r01111111111111111111111111111111]
    rgen_1(a, b, c, d, s) =  (lf.left_shift((s & a), b)) xor lf.right_shift( (lf.left_shift(s, c) xor s), d) : _ & 2147483647;
};


//---------------------------------`(rnd.)taus_rand_normed`---------------------------------------
// generate random float values in the range [0, 1] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.taus_rand_normed(s1, s2, s3) : _;
// ```
// with
//   + `s1 >  2` — (int) 1st seed
//   + `s2 >  8` — (int) 2nd seed
//   + `s3 > 16` — (int) 3rd seed
//
// on change of (at least one) state, taus_rand is re-seeded to that state configuration.  
// 
taus_rand_normed(s1, s2, s3) = taus_rand(s1, s2, s3) / 2147483647.0;




//---------------------------------`(rnd.)rand2`---------------------------------------
// generate random float values in the range [-range, range] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.rand1(1248245) : _;
// ```
//
// on change of the seed, `rand` is re-seeded.  
// 
rand1(seed) = taus_rand_normed(s1, s2, s3) with {

    // mess up the bits of the seed
    hashedSeed = hash(seed);
    bitSeed = ffunction(int bitSeed (int, int, int) , "scUGens.h", "");

    // initialize 3-seed using given seed value and taking care of
    // the requirements. The constants are arbitrary.
    s1 = bitSeed(seed, 1243598713, 2);
    s2 = bitSeed(seed, 1821928721, 8);
    s3 = bitSeed(seed, 3093459404, 16);
};


//---------------------------------`(rnd.)rand2`---------------------------------------
// generate random float values in the range [-range, range] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.rand2(1248245, 1) : _;
// ```
//
// on change of the seed, `rand` is re-seeded.  
// 
rand2(seed, range) = (rand1(seed) * 2 * range) - range;


//---------------------------------`(rnd.)rand`---------------------------------------
// generate random float values in the range [0, r_max] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.rand(1248245, 1) : _;
// ```
//
// on change of the seed, `rand` is re-seeded.  
// 
rand(seed, r_max) = rand1(seed) * r_max;



//---------------------------------`(rnd.)rrand`---------------------------------------
// generate random float values in the range [0, r_max] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.rrand(1248245, -1, 1) : _;
// ```
//
// on change of the seed, `rrand` is re-seeded.  
// 
rrand(seed, r_min, r_max) = rand1(seed) * (r_max - r_min) + r_min;


//---------------------------------`(rnd.)irand`---------------------------------------
// generate random float values in the range [0, r_max] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.irand(1248245, 1) : _;
// ```
//
// on change of the seed, `irand` is re-seeded.  
// 
irand(seed, r_max) = int(rand(seed, r_max + 1));


//---------------------------------`(rnd.)irand2`---------------------------------------
// generate random float values in the range [0, r_max] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.irand2(1248245, 10) : _;
// ```
//
// on change of the seed, `irand2` is re-seeded.  
// 
irand2(seed, range) = int(rand2(seed, range + 1));


//---------------------------------`(rnd.)irrand`---------------------------------------
// generate random float values in the range [0, r_max] at sample rate
// 
// note: relies on foreign functions (c-based platforms only)
//
// #### Usage
// 
// ```
// process = rnd.irrand(1248245, 5, 10) : _;
// ```
//
// on change of the seed, `irrand` is re-seeded.  
// 
irrand(seed, r_min, r_max) = int(rrand(seed, r_min -1, r_max + 1));


// //---------------------------------`(rnd.)steady_taus_rand`---------------------------------------
// // generates random integer values in the range [0, 2147483647]
// // updates only if (any) seed is updated
// // based on JMC's implementation of the 
// // Ran088: L'Ecuyer's 1996 three-component Tausworthe generator "taus88"
// // 
// // 
// // 
// // #### Usage
// // 
// // ```
// // process = rnd.steady_taus_rand(s1, s2, s3) : _;
// // ```
// // with
// //   + `s1 >  2` — (int) 1st seed
// //   + `s2 >  8` — (int) 2nd seed
// //   + `s3 > 16` — (int) 3rd seed
// //
// // on change of (at least one) state, a new random value is chosen.  
// steady_taus_rand(s1, s2, s3) = rgen(s1, s2, s3) : (_ xor _ xor _) with {

//     // generate integer random element in the range [0, 2147483647], 
//     // i.e. [2r0, 2r01111111111111111111111111111111] (all bits high but sign bit) 
//     rgen(s1, s2, s3) = s1, s2, s3 : 
//         rgen_1( -2, 12, 13, 19), 
//         rgen_1( -8,  4,  2, 25), 
//         rgen_1(-16, 17,  3, 11);

//     // last `&` ensures values between [2r0, 2r01111111111111111111111111111111]
//     rgen_1(a, b, c, d, s) =  (lf.left_shift((s & a), b)) xor lf.right_shift( (lf.left_shift(s, c) xor s), d) : _ & 2147483647;
// };

